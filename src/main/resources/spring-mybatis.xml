<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        ">
<!--数据源配置 c3p0-->
    <bean id="mysql_dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">

        <property name="driverClass" value="${db.mysql.driverClass}"/>
        <property name="jdbcUrl" value="${db.mysql.jdbcUrl}"/>
        <property name="user" value="${db.mysql.user}"/>
        <property name="password" value="${db.mysql.password}"/>

        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="${db.minPoolSize}"/>

        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${db.maxPoolSize}"/>

        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${db.initialPoolSize}"/>

        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${db.maxIdleTime}"/>

        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${db.acquireIncrement}"/>

        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
       如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="${db.maxStatements}"/>

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="${db.idleConnectionTestPeriod}"/>

        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}"/>

        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
        保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
       获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}"/>

        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
     时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
      等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="${db.testConnectionOnCheckout}"/>
    </bean>
    <!-- 日指表数据库连接 -->
    <bean id="mysql_dataSource_log" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">

        <property name="driverClass" value="${db.mysql.driverClass}"/>
        <property name="jdbcUrl" value="${dblog.mysql.jdbcUrl}"/>
        <property name="user" value="${dblog.mysql.user}"/>
        <property name="password" value="${dblog.mysql.password}"/>

        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="${db.minPoolSize}"/>

        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${db.maxPoolSize}"/>

        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${db.initialPoolSize}"/>

        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${db.maxIdleTime}"/>

        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${db.acquireIncrement}"/>

        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
       如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="${db.maxStatements}"/>

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="${db.idleConnectionTestPeriod}"/>

        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}"/>

        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
        保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
       获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}"/>

        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
     时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
      等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="${db.testConnectionOnCheckout}"/>
    </bean>
   
    <bean id="log4jdbcInterceptor" class="ssm.autoCode.portal.utils.DataSourceSpyInterceptor" />
	<bean id="dataSourceLog4jdbcAutoProxyCreator"
	    class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	    <property name="interceptorNames">
	        <list>
	            <value>log4jdbcInterceptor</value>
	        </list>
	    </property>
	    <property name="beanNames">
	        <list>
	            <value>mysql_dataSource</value>
	            <value>mysql_dataSource_log</value>
	        </list>
	    </property>
	</bean>
    
    

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mysql_dataSource"/>
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis_mapper/db1/*/*/*.xml</value>
			</list>
		</property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="ssm.autoCode.portal.db1" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- log -->
	<bean id="sqlSessionFactoryLog" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mysql_dataSource_log"/>
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis_mapper/db2/*/*/*.xml</value>
			</list>
		</property>
		
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="ssm.autoCode.portal.db2" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryLog" />
	</bean>
	

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="sava*" />
		</tx:attributes>
	</tx:advice>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mysql_dataSource" />
	</bean>
	
	<tx:advice id="txAdviceLog" transaction-manager="transactionManagerLog">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="sava*" />
		</tx:attributes>
	</tx:advice>

	<bean id="transactionManagerLog"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mysql_dataSource_log" />
	</bean>
	




</beans>